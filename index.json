[{"content":"标签 新建标签：command + t\n关闭标签：command + w\n切换标签：\ncommand + 数字 1/2\ncommand + 左右方向键\n切换全屏：command + enter\n查找：command + f\n分屏 新建垂直分屏：command + d\n新建水平分屏：command + shift + d\n切换屏幕：command + option + 方向键 command + [ 或 command + ]\n查看历史命令：command + ;\n查看剪贴板历史：command + shift + h\n其他 清屏1：command + r\n清屏2：ctrl + l\n清除当前行：ctrl + u\n到行首：ctrl + a\n到行尾：ctrl + e\n前进后退：ctrl + f/b (相当于左右方向键)\n上一条命令：ctrl + p\n搜索命令历史：ctrl + r\n删除当前光标的字符：ctrl + d\n删除光标之前的字符：ctrl + h\n删除光标之前的单词：ctrl + w\n删除到文本末尾：ctrl + k\n交换光标处文本：ctrl + t\n","permalink":"https://lysandert.github.io/posts/blog/iterm2/","summary":"标签 新建标签：command + t 关闭标签：command + w 切换标签： command + 数字 1/2 command + 左右方向键 切换全屏：command + enter 查找：command + f 分屏 新建垂直分屏：command + d 新建水平分屏：command + shift + d 切换屏幕：command + option + 方向键 command + [ 或 command + ] 查看历史命令","title":"iTerm2 常用快捷键"},{"content":"run from terminal\nmysql -uroot -p \u0026gt;\u0026gt; 输入密码 attention 命令、检索均不区分大小写。习惯上将命令关键字大写，也可以通过配置sql让检索区分大小写 basic # 显示库列表 show databases; # 创建新库 create database \u0026lt;d_name\u0026gt;; # 使用这个库 use \u0026lt;d_name\u0026gt;; # 显示表列表 show tables; # 显示列（col）列表 show columns from \u0026lt;table_name\u0026gt;; describe \u0026lt;col_name\u0026gt;; select 无序检索 # select关键字 select \u0026lt;col_name1\u0026gt;, \u0026lt;col_name2\u0026gt;, ... from \u0026lt;table_name\u0026gt;; # a single col is also valid # * means all (like in python) select * from \u0026lt;table_name\u0026gt;; # 从start(index从0开始,默认0，可选参数)开始选length行 select \u0026lt;col_name1\u0026gt; from \u0026lt;table_name\u0026gt; limit (start,) length; # 完全限定 select \u0026lt;table_name\u0026gt;.\u0026lt;col_name\u0026gt; from \u0026lt;d_name\u0026gt;.\u0026lt;table_name\u0026gt;; 排序检索 # order by 关键字 # 先按col_3排序，如果并列则按col_4 # 默认升序(A-Z)，加DESC转换某[一列]为降序 select \u0026lt;col_1\u0026gt;, \u0026lt;col_2\u0026gt; , ... from \u0026lt;table_name\u0026gt; order by \u0026lt;col_3\u0026gt; DESC, \u0026lt;col_4\u0026gt;; 过滤检索 操作符 =, !=, \u0026lt;, \u0026lt;=, \u0026gt;, \u0026gt;= \u0026lt;\u0026gt; 相当于!= BETWEEN a AND b IS NULL 空值检查 # where 关键字 select \u0026lt;col\u0026gt; from \u0026lt;table\u0026gt; where \u0026lt;col2\u0026gt; = \u0026#39;lysander\u0026#39;; # 值可以是数值也可以是字符串（用单引号） SELECT \u0026lt;col\u0026gt; FROM \u0026lt;table\u0026gt; WHERE \u0026lt;col_\u0026gt; BETWEEN 5 AND 10; 逻辑运算符 AND 和，优先级高于OR，可用圆括号（）改变优先级 OR IN，用到圆括号()；可实现OR的功能，但速度更快，也有更多其他功能比如包含SELECT语句 NOT 否定它后面的一切条件，可用于找出与条件不匹配的行 SELECT \u0026lt;col\u0026gt; FROM \u0026lt;table\u0026gt; WHERE \u0026lt;col1\u0026gt; IN (3,4,5,6) AND \u0026lt;col2\u0026gt; \u0026gt;= 10; 通配符(模糊匹配) 需要先用LIKE操作符\n% 表示任何字符出现任意次数（包括0次） _ 表示任何字符出现exactly一次 # % # 以str开头的 SELECT prod_id, prod_name FROM products WHERE prod_name LIKE \u0026#39;str%\u0026#39;; # 以str结尾的 SELECT prod_id, prod_name FROM products WHERE prod_name LIKE \u0026#39;%str\u0026#39;; # str在中间的 SELECT prod_id, prod_name FROM products WHERE prod_name LIKE \u0026#39;%str%\u0026#39;; # 以str1开头，以str2结尾的 SELECT prod_id, prod_name FROM products WHERE prod_name LIKE \u0026#39;str1%str2\u0026#39;; # _用法与%相同，也可组合使用 SELECT prod_id, prod_name FROM products WHERE prod_name LIKE \u0026#39;%str_\u0026#39;; 正则表达式 关键字REGEXP(regular expression)\n# 基本字符匹配-所有包含\u0026#39;1000\u0026#39;的 SELECT prod_name FROM products WHERE prod_name REGEXP \u0026#39;1000\u0026#39;; # dot表示匹配任意**一个**字符 REGEXP \u0026#39;.000\u0026#39;; # 可见1000和2000都会被筛选出（虽然这个例子里面加不加dot都不会对结果有影响） +--------------+ | prod_name | +--------------+ | JetPack 1000 | | JetPack 2000 | +--------------+ # OR REGEXP \u0026#39;1000|2000\u0026#39; # 匹配几个字符之一 REGEXP \u0026#39;[123] ton\u0026#39; +-------------+ | prod_name | +-------------+ | 1 ton anvil | | 2 ton anvil | +-------------+ # 匹配范围 REGEXP \u0026#39;[1-3] ton\u0026#39; # 等价上一句 REGEXP \u0026#39;[a-z]\u0026#39; # 转义符用// REGEXP \u0026#39;//.\u0026#39; # 表示检索dot 匹配字符类\n[:alnum:] 任意字母和数字（同[a-zA-Z0-9]） [:alpha:] 任意字符（同[a-zA-Z]） [:blank:] 空格和制表（同[\\t]） [:cntrl:] ASCII控制字符（ASCII 0到31和127） [:digit:] 任意数字（同[0-9]） [:graph:] 与[:print:]相同，但不包括空格 [:lower:] 任意小写字母（同[a-z]） [:print:] 任意可打印字符 [:punct:] 既不在[:alnum:]又不在[:cntrl:]中的任意字符 [:space:] 包括空格在内的任意空白字符（同[\\f\\n\\r\\t\\v]） [:upper:] 任意大写字母（同[A-Z]） [:xdigit:] 任意十六进制数字（同[a-fA-F0-9]） 匹配多个实例\n* 0个或多个匹配 + 1个或多个匹配（等于{1,}） ? 0个或1个匹配（等于{0,1}） {n} 指定数目的匹配 {n,} 不少于指定数目的匹配 {n,m} 匹配数目的范围（m不超过255） # 示例 SELECT prod_name FROM products WHERE prod_name REGEXP \u0026#39;\\\\([0-9] sticks?\\\\)\u0026#39; order by prod_name; +----------------+ | prod_name | +----------------+ | TNT (1 stick) | | TNT (5 sticks) | +----------------+ SELECT prod_name FROM products WHERE prod_name REGEXP \u0026#39;[[:digit:]]{4}\u0026#39; order by prod_name; SELECT prod_name FROM products WHERE prod_name REGEXP \u0026#39;[0-9][0-9][0-9][0-9]\u0026#39; order by prod_name; # 两者等价 +--------------+ | prod_name | +--------------+ | JetPack 1000 | | JetPack 2000 | +--------------+ 定位符\n^ 文本的开始 $ 文本的结尾 [[:\u0026lt;:]] 词的开始 [[:\u0026gt;:]] 词的结尾 # 示例 SELECT name FROM person_tbl WHERE name REGEXP \u0026#39;^[aeiou]|ok$\u0026#39;; # 查找name字段中以元音字符开头或以\u0026#39;ok\u0026#39;字符串结尾的所有数据 todo ","permalink":"https://lysandert.github.io/posts/blog/mysql/","summary":"run from terminal mysql -uroot -p \u0026gt;\u0026gt; 输入密码 attention 命令、检索均不区分大小写。习惯上将命令关键字大写，也可以通过配置sql让检索区分大小写 basic # 显示库列表 show databases; # 创建新库 create database \u0026lt;d_name\u0026gt;; # 使用这个库 use \u0026lt;d_name\u0026gt;; # 显示表列表 show tables; # 显示列（col）列表 show columns from \u0026lt;table_name\u0026gt;; describe \u0026lt;col_name\u0026gt;; select 无序检索 # select关键字 select \u0026lt;col_name1\u0026gt;, \u0026lt;col_name2\u0026gt;, ... from \u0026lt;table_name\u0026gt;; # a single col is also valid # * means all (like in python)","title":"MySQL 常用命令"},{"content":"安装 命令行中输入\n# 若安装了python pip包 pip install mycli # or 安装了homebrew brew install mycli 使用 # 登录 mycli -u \u0026lt;user\u0026gt; -h \u0026lt;host\u0026gt; -p \u0026lt;password\u0026gt; #查看帮助 mycli --help # 若只是连接本地mysql mycli -uroot -p \u0026lt;password\u0026gt; # 其余命令皆和mysql语法一样 显示 ","permalink":"https://lysandert.github.io/posts/blog/mycli/","summary":"安装 命令行中输入 # 若安装了python pip包 pip install mycli # or 安装了homebrew brew install mycli 使用 # 登录 mycli -u \u0026lt;user\u0026gt; -h \u0026lt;host\u0026gt; -p \u0026lt;password\u0026gt; #查看帮助 mycli --help # 若只是连接本地mysql mycli -uroot -p \u0026lt;password\u0026gt; # 其余命令皆和mysql语法一样 显示","title":"Mycli-MySQL办公利器"},{"content":"折腾了半天，终于学会怎么在博客中插入图片了。\n这里记录一下解决办法\n插入图片：相对路径存在的问题 这是根目录结构：\ncontent -posts --blog 没有blog这一级结构的可以直接无视\n当我们用hugo指令：\nhugo new posts/blog/article.md 生成新文章后hugo会自动在blog文件夹下面创建一个md文件：\ncontent -posts --blog ---article.md 我们需要的是生成一个与article.md平级的文件夹用于存放要用到的图片，比如叫pic。 将想要插入的图片放入pic，比如123.png:\ncontent -posts --blog ---pic ----123.png ---article.md 之后，当我们在article.md中撰写文章时，用md语法来引用图片\n![替代文字](相对路径) 坑点就在这个相对路径上。\nvscode会提示你输入\n![alt](pic/123.png) 这是因为在vscode眼中，article.md只是一个文件而非文件夹。\n但是hugo编译静态文件的时候的逻辑可不是这样\n如果你这时用hugo server命令打开你的本地网页，会发现图片加载不出来（裂了），此时在新标签页打开这个图片会发现网址后缀为：\nposts/blog/article/pic/123.png 显然hugo是把article.md当成一个文件夹来看待了\n所以我们在选择路径时，应该先回到上一级目录，再进入pic文件夹：\n![alt](../pic/123.png) 再次hugo server命令即可看到生成在网页上的图片了\n图片居中与大小调整 md语法默认是图片是left-align的\n想要图片居中可以用html实现：\n\u0026lt;center\u0026gt;\u0026lt;img src=\u0026#34;../pic/123.png\u0026#34; width=\u0026#34;10%\u0026#34; /\u0026gt;\u0026lt;/center\u0026gt; center：居中图片\n相对路径：与上一节提到的一样\nwidth：调整图片大小\nhugo shortcodes hugo也提供了定制化功能shortcodes，具有多种可设定参数，也可自定义\n","permalink":"https://lysandert.github.io/posts/blog/blog_insert_pic/","summary":"折腾了半天，终于学会怎么在博客中插入图片了。 这里记录一下解决办法 插入图片：相对路径存在的问题 这是根目录结构： content -posts --blog 没有blog这一级结构的可以直接无视 当我们用hugo指令： hugo new posts/blog/article.md 生成新文章后hugo会自动在blog文件夹下面创建一个md文件： content -posts --blog ---article.md 我们需要的是生成一个与arti","title":"hugo博客 文内插入图片"},{"content":"Prerequisite 一个提供hk以外节点代理的vpn 注册一个chatgpt账号 vscode客户端（是不是很严谨？） 1.和2.可以参考国内自助获取chatgpt方法\n3.指路官网自行根据计算机型号下载\n下载与配置 打开vscode侧边栏的\u0026lt;拓展\u0026gt;，搜索chatgpt\n这里有很多自称为chatgpt的插件，我们下载图标是紫色的这个：\n下载后全局启用，重启vscode会在侧边栏发现这个选项：\n点击，会产生一个界面等你log in\n这时打开网址\n选择create new key-\u0026gt;copy\n最好把这个key保存下来，否则之后每次要重新生成\n再次打开vscode，点击log in，粘贴这个key即可开始与chatgpt对话\n这里提供两种方式：\n直接在对话框进行指示 选中一段代码，点击鼠标右键，可以看到有关chatgpt的指令 这里提供一些常用指令：\nBasic commands ChatGPT: Ad-hoc prompt Ad-hoc custom prompt prefix for the selected code. Right click on a selected block of code, run command. You will be asked to fill in your preferred custom prefix and the extension will remember that string for your subsequent ad-hoc queries.\nChatGPT: Add tests Write tests for you. Right click on a selected block of code, run command. \u0026ldquo;default\u0026rdquo;: \u0026ldquo;Implement tests for the following code\u0026rdquo;, \u0026ldquo;description\u0026rdquo;: \u0026ldquo;The prompt prefix used for adding tests for the selected code\u0026rdquo;\nChatGPT: Find bugs Analyze and find bugs in your code. Right click on a selected block of code, run command. \u0026ldquo;default\u0026rdquo;: \u0026ldquo;Find problems with the following code\u0026rdquo;, \u0026ldquo;description\u0026rdquo;: \u0026ldquo;The prompt prefix used for finding problems for the selected code\u0026rdquo;\nChatGPT: Optimize Add suggestions to your code to improve. Right click on a selected block of code, run command. \u0026ldquo;default\u0026rdquo;: \u0026ldquo;Optimize the following code\u0026rdquo;, \u0026ldquo;description\u0026rdquo;: \u0026ldquo;The prompt prefix used for optimizing the selected code\u0026rdquo;\nChatGPT: Explain Explain the selected code. Right click on a selected block of code, run command. \u0026ldquo;default\u0026rdquo;: \u0026ldquo;Explain the following code\u0026rdquo;, \u0026ldquo;description\u0026rdquo;: \u0026ldquo;The prompt prefix used for explaining the selected code\u0026rdquo;\nChatGPT: Add comments Add comments for the selected code. Right click on a selected block of code, run command. \u0026ldquo;default\u0026rdquo;: \u0026ldquo;Add comments for the following code\u0026rdquo;, \u0026ldquo;description\u0026rdquo;: \u0026ldquo;The prompt prefix used for adding comments for the selected code\u0026rdquo;\nChatGPT: Custom prompt 1 Your custom prompt 1. It\u0026rsquo;s disabled by default, please set to a custom prompt and enable it if you prefer using customized prompt \u0026ldquo;default\u0026rdquo;: \u0026ldquo;\u0026rdquo;,\nChatGPT: Custom prompt 2 Your custom prompt 2. It\u0026rsquo;s disabled by default, please set to a custom prompt and enable it if you prefer using customized prompt \u0026ldquo;default\u0026rdquo;: \u0026ldquo;\u0026rdquo;,\nOther available commands ChatGPT: Ask anything Free-form text questions within conversation window.\nChatGPT: Reset session Clears the current session and resets your connection with ChatGPT\nChatGPT: Clear conversation Clears the conversation window and resets the thread to start a new conversation with ChatGPT.\nChatGPT: Export conversation Exports the whole conversation in Markdown for you to easily store and find the Q\u0026amp;A list.\n注意：非代码问题 想问其他非代码问题，需要先在对话框键入\nChatGPT: Ask anything 即可开始提问\n","permalink":"https://lysandert.github.io/posts/blog/chatgpt_plugin_for_vscode/","summary":"Prerequisite 一个提供hk以外节点代理的vpn 注册一个chatgpt账号 vscode客户端（是不是很严谨？） 1.和2.可以参考国内自助获取chatgpt方法 3.指路官网自行根据计算机型号下载 下载与配置 打开vscode侧边栏的\u0026lt;拓展\u0026gt;，搜索chatgpt 这里有很多自称为chatgp","title":"VSCode ChatGPT插件"},{"content":"C++的堆操作一共两套体系：\nmake_heap和priority_queue\n前者是直接把原容器变成堆，类似于python中的heapq模块，\n后者是新建一个priority_queue类容器。\n默认都是大顶堆,默认的cmp都是less\u0026lt;\u0026gt;.\n想要小顶堆可以把val都加负号，也可以传入greater\u0026lt;\u0026gt;，同时也可以自定义：创建一个struct，或写一个cmp函数传入。\n1. make_heap 头文件： #include \u0026lt;algorithm\u0026gt; 堆操作方法-更底层，支持复杂度O(n)的直接建堆。 数据结构不改变，是直接将原先容器中的元素order变成符合堆定义的order 1.1 默认大顶堆，即cmp位置传入 \u0026#34;less\u0026lt;\u0026gt;{}\u0026#34; vector\u0026lt;int\u0026gt; v { 3, 2, 4, 1, 5, 9 }; // 建堆：传入iterator // make_heap(iterator::left, iterator::right, cmp = less\u0026lt;\u0026gt;); make_heap(v.begin(),v.end()); //默认max-heap // after make_heap, v: 9 5 4 1 2 3 // 弹出：先pop_heap再pop_back pop_heap(v.begin(),v.end()); // after pop_heap, v: 5 3 4 1 2 9 // 把堆顶元素放到堆尾去了 // 此时非堆尾元素构成一个堆 int top = v.back; // top = 9 v.pop_back(); // v仍然是一个vector\u0026lt;int\u0026gt;，支持pop_back // after removing the former top element, v: 5 3 4 1 2 // 压入：先push_back再push_pop v.push_back(6); push_heap(v.begin(),v.end()); 1.2 快捷改成小顶堆 1.2.1 先把数据都添加负号再建堆 1.2.2 cmp位置传入 \u0026#34;greater\u0026lt;\u0026gt;{}\u0026#34; make_heap(v1.begin(), v1.end(), greater\u0026lt;\u0026gt;{}); //注意pop_heap和push_heap时同样也要传 pop_heap(v1.begin(), v1.end(), greater\u0026lt;\u0026gt;{}); push_heap(v1.begin(), v1.end(), greater\u0026lt;\u0026gt;{}); 1.3 传入其他cmp自定义 2. priority_queue #include \u0026lt;queue\u0026gt; 封装的更好。但是不支持直接建堆。 数据结构改为优先队列类型,与vector\u0026lt;\u0026gt;接口不能共用。 2.1 默认是传入less\u0026lt;\u0026gt;，是最大堆 priority_queue\u0026lt;int\u0026gt; res; res.push(x); 2.2 可以传入greater\u0026lt;\u0026gt; 改成最小堆，或将数据添加负号 priority_queue\u0026lt;int, vector\u0026lt;int\u0026gt;, greater\u0026lt;\u0026gt; \u0026gt; res; res.push(x); // 或 priority_queue\u0026lt;int\u0026gt; res; res.push(-x); 2.3 自定义结构 struct S{ int key, val; //一定是重写 \u0026lt; 操作符！！ bool operator\u0026lt;(const \u0026amp;S other){ return val \u0026lt; other.val; // 或其他的判别方式，但反正大的那个意味着更高的优先级 } priority_queue\u0026lt;S\u0026gt; res; res.push({key,val});//此时便会自动用S中重写的\u0026lt;当作cmp函数去排序 } 3. topK问题 想要找到数组中第k或前k大元素，可以用heap来解决（当然也有其他更好的办法例如用快排的partition可以实现O(n)的复杂度，这里不再赘述）\n一. 维护n个元素的堆 直接建max-heap，然后弹出来k个\n复杂度为O(n + klgn)\n二. 维护k个元素的堆 对前k个建min-heap。后面的每个与堆顶比较，把大的留在堆里，这样最后就剩下了前k个最大的元素，第k个就是堆顶那个。\n复杂度为O(k + (n-k)lgk) 或者 O(nlgk)\n(主要是看前k个是直接建堆还是插入建堆)\n","permalink":"https://lysandert.github.io/posts/blog/c++_heap%E7%94%A8%E6%B3%95/","summary":"C++的堆操作一共两套体系： make_heap和priority_queue 前者是直接把原容器变成堆，类似于python中的heapq模块， 后者是新建一个priority_queue类容器。 默认都是大顶堆,默认的cmp都是less\u0026lt;\u0026gt;. 想要小顶堆可以把val都加负号，","title":"C++ STL heap用法"},{"content":"1. hugo 在hugo中根据指示，下载hugo, go, git.\n根据指示可以创建一个demo熟悉操作：\nhugo new your_site_name cd your_site_name hugo server 然后打开浏览器输入\u0026lt;http://localhost:1313/\u0026gt;即可浏览网站 (虽然现在什么也没有) 需要注意的是，macos下载go之后可能仍然会对相关指令报错：\ncommand not found: go 按照这个链接添加PATH即可解决\n也可以去中文站点获得更流畅的阅读体验。\n2. github pages github提供无需付费，无需备案的网站部署方案：git pages.\n为了使给给每个人的url互斥，github的解决方案是，让网站名必须与用户名完全一样。\n我们需要做的只是：\n注册一个github账号 在github中创建一个新的仓库，名字为\u0026lt;你的用户名\u0026gt;.github.io 3. themes 接下来，可以去https://themes.gohugo.io/挑选你喜欢的主题，也可以去github挑选star数较高的主题。hugo的社区总体来说比较成熟。\n这里推荐两个主题：\nacademic 适合于学术主页\nPaperMode 适合于个人博客\n当选好了主题之后，要将主题应用到我们的网站上来。\n这里提供两个方案：\n1. 直接用，本人采取的就是这个 git clone \u0026lt;https/ssh of the theme\u0026gt; git submodule update --init --recursive 2. 把他当作一个主题，主要是为了防止以后想换主题 hugo new site_name cd site_name/themes git clone \u0026lt;http/ssh of the theme\u0026gt; git submodule update --init --recursive 不熟悉git操作的话可以自行google或者参考git command\n之后，可以用命令来创建新文章\nhugo new article_name.md 这个article.md会被默认放入content文件夹中\n用vscode或者其他md编辑器打开此文件后便可以快乐的写文章了\n具体的工作流可以参考：workflow\n更多操作，请阅读主题的README文件进行配置\n4. 网站部署 理论上说，只要把site的子文件夹public中的文件（hugo生成的网页文件）都push到github上即可。\nhugo生成的site本身是一个repo，而git不允许其子文件夹public也成为一个repo。然而，我们必须得让public与\u0026lt;你的名字\u0026gt;.github.io仓库建立连接，这里我提供两种解决方案：\n1. 删除site本身的.git文件(直接在图形界面操作)， 然后将public初始化为git仓库并与\u0026lt;你的用户名\u0026gt;.github.io连接： cd name_of_your_site hugo cd public git remote add origin \u0026lt;ssh or https of your repo\u0026gt; 这里推荐使用ssh，原因是可以自行配置（具体自己查）使得不用每次都输入密码 2. 使\u0026lt;你的用户名\u0026gt;.github.io成为site的submodule，详见 \u0026lt;https://www.atlassian.com/git/tutorials/git-submodule\u0026gt; cd name_of_your_site git submodule add -f -b master \u0026lt;https or ssh of your repo\u0026gt; public 如果想要更方便一点的话，建议选择第一种方案。\n接下来要将hugo生成的本地文件推到github仓库中进行部署\n1. 如果你用的是第一种方案 cd name_of_your_site/public git push 2. 如果你是第二种 cd name_of_your_site git add --all git commit -m \u0026#34;write something\u0026#34; git push 之后打开https://你的用户名.github.io就可以欣赏你自己的博客了\n如果显示404或者博客内容未更新，请清除浏览器缓存或等一会儿。\n","permalink":"https://lysandert.github.io/posts/blog/blog_setup/","summary":"1. hugo 在hugo中根据指示，下载hugo, go, git. 根据指示可以创建一个demo熟悉操作： hugo new your_site_name cd your_site_name hugo server 然后打开浏览器输入\u0026lt;http://localhost:1313/\u0026gt;即可浏览网站 (虽然现在什么也没有) 需要注意的是，macos下载go之后可能仍然会对相关指令报错： command not found: go 按","title":"【个人网站搭建】hugo + github pages"},{"content":"1.新建文档 新建 markdown文档 类型：blog/research/read/life\ncd ~/Documents/myBlogs hugo new posts/blog/\u0026lt;article_name\u0026gt;.md 2. 写作 打开vsc进行md编辑，实时渲染。\n也可以在用热键command+S保存后在bash中输入：\nhugo server -D 在浏览器中打开 http://localhost:1313/ 即可在本地浏览博客生成情况\n写作完毕后，记得添加tags方便查询与归档\n也可以添加keywords便于搜索引擎爬取\n3. 上传remote cd myBlogs hugo -F --cleanDestinationDir cd public git add . git commit -m \u0026#34;sth“ git push 文章会自动上传到 http://lysandert.github.io\n","permalink":"https://lysandert.github.io/posts/blog/blog_workflow/","summary":"1.新建文档 新建 markdown文档 类型：blog/research/read/life cd ~/Documents/myBlogs hugo new posts/blog/\u0026lt;article_name\u0026gt;.md 2. 写作 打开vsc进行md编辑，实时渲染。 也可以在用热键command+S保存后在bash中输入： hugo server -D 在浏览器中打开 http://localhost:1313/ 即可在本地浏览博客生成情况 写作完毕后，记得添加tags方便查询与","title":"Blog Workflow"},{"content":"basic initialize local repository\ngit init make untracked file tracked\ngit add [file] git add . # add all git add --all git add -A commit changes\ngit commit -m \u0026#34;message\u0026#34; view current information about git\ngit status clone from the github\ngit clone ssh/https git clone -b branch_name ssh/https show commit logs\ngit log reset current HEAD to specified state\n# this commend will delete logs along the way git reset --hard HEAD^ #last git reset --hard HEAD^^ #the time before last time git reset --hard HEAD~3 git reset --hard commit_id revert to existing commits\n# this commend will not delete any log git revert -n HEAD^ #last git revert -n HEAD^^ #the time before last time git revert -n HEAD~3 git revert -n commit_id branch create new branch\ngit checkout -b branch_name remote repository set a new remote repo\ngit remote add origin [https or ssh] # origin is the default name of remote repo view current remote repo\ngit remote git remote -v change url\ngit remote set-url [https or ssh] 拉取远程仓库\ngit pull git pull origin branch_name \u0026gt;\u0026gt;\u0026gt; Already up to date. upload\ngit push -u origin master # first time git push origin master git push remote_name local_branch_name git push pull request fork the public repo clone it to the local create new branch push it to the remote create pull request and wait for the acceptance ","permalink":"https://lysandert.github.io/posts/blog/git_command/","summary":"basic initialize local repository git init make untracked file tracked git add [file] git add . # add all git add --all git add -A commit changes git commit -m \u0026#34;message\u0026#34; view current information about git git status clone from the github git clone ssh/https git clone -b branch_name ssh/https show commit logs git log reset current HEAD to specified state # this commend will delete logs along the way git reset --hard HEAD^ #last git reset --hard HEAD^^ #the time before last time git reset --hard HEAD~3 git reset --hard commit_id revert to existing commits # this commend will not delete any log git revert -n HEAD^ #last git revert -n HEAD^^ #the time before last time git revert -n HEAD~3 git revert -n commit_id branch create new branch git checkout -b branch_name remote repository set a new remote","title":"git commands"},{"content":"一.购买代理服务 即梯子，vpn，whatever。可以帮助你将ip地址包装成其他国家/地区，从而打开比如维基百科、chatgpt等学习网站。\n已有代理服务的可以直接看下一节内容。如果觉得自己的梯子速度比较快的话也可以选择推荐给我。\n没有的可以尝试自行搜索。考虑到百度现在ban了包括但不限于vpn,vnp,代理等关键词，实在搜不到的话可以尝试我的这个：https://user.viptwo.xyz\n照着网址的说明去一步步做即可。\n这个代理的花费是30CNY/月，again，如果有更好的选择请推给我。\n二.购买接码服务 这一步主要是chatgpt限制只有国外手机号可以注册。\n既然你已经完成了第一步，那么便可以打开全局代理，自行用谷歌搜索接码服务了。\n或者也可以尝试我之前用的这个：https://sms-activate.org\n界面长这样：\n默认是英语，可以选择先在右上角的ENG那里改成中文版\n然后在右上角点击注册，注册完了就登录，登录完了右上角会出现余额。点进去充值。\n理论上购买一次接码服务只需要CNY1，但是它只允许充值美元，所以我们选择充值1美元，可选支付宝(AliPay)支付，大概CNY7。\n充值完了之后返回首页，在左边栏找到OpenAi，也就是研发出chatgpt的那个公司。\n点击OpenAi，然后选个国家，美日印新都可以，注意别买标注了\u0026lt;虚拟\u0026gt; 的就行，点击购物车图标进行购买。\n之后会跳转页面并显示你购买的手机号。\n三. 注册chatgpt账号 首先开启全局代理服务，选择非国内地区（hk也不行），然后打开openai 或https://openai.com/api/\n点击右上角sign up进行注册。谷歌、微软账号或者邮箱注册都可以\n按照提示去做，会跳到一步让你输入手机号，这时我们将第二步中购买的接码服务中的手机号复制粘贴过来\n稍后会让你填写验证码，这时接码网站那里会显示它手机收到的验证码，同样复制粘贴过来即可。\n注册成功后进入chatgpt 或 https://chat.openai.com/auth/login即可登录\n登录完选择personal use即可在底部对话框与chatgpt进行对话了\n四.第三步可能遇到的问题 1.接码服务过期了 一般的接码服务都是有限时的，所以过期很正常。只需要返回第二步再购买一次即可，因为我们之前充值的是1美元，所以大概可以买5-6次\n2. 不服务您所在的国家/at capacity 首先检查代理是否开启（比如看看google.com能不能正确搜索），是否使用了香港节点。\n如果还是不行，这里提供3种解决办法，请挨个试一遍\n1）清除浏览器缓存，然后刷新页面 怎么清除浏览器缓存，建议自己搜一下对应的浏览器操作\n2）在新标签页打开无痕模式，然后重新打开chatgpt并登录 3）按如下指示操作 复制下面这段代码：\nwindow.localStorage.removeItem(Object.keys(window.localStorage).find(i=\u0026gt;i.startsWith('@@auth0spajs'))) 然后在浏览器网址栏 键入 ：\njavascript: 然后将代码粘贴进去，接着刷新\n4）如果还是不行，请等几天，它可能确实服务器崩了或者在变相强迫你买plus ","permalink":"https://lysandert.github.io/posts/blog/chatgpt_setup/","summary":"一.购买代理服务 即梯子，vpn，whatever。可以帮助你将ip地址包装成其他国家/地区，从而打开比如维基百科、chatgpt等学习网站。 已有代理服务的可以直接看下一节内容。如果觉得自己的梯子速度比较快的话也可以选择推荐给我。 没有的可以尝试自行搜索。考虑到百度现在ban了包括但","title":"国内获取账号、访问chatGPT"},{"content":"1. apt/apt-get update失败 1.1 尝试换源 命令行里输入\nnano /etc/apt/sources.list 在打开的编辑器里将原有的源注释。\n打开firefox搜索中科大/阿里/清华源（记得一定要与ubuntu的版本对应），复制并粘贴到编辑器中。\n例如：清华源for ubuntu 20.04 LTS\n# 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释 deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse # deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse # deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse # deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse # deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse # 预发布软件源，不建议启用 # deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-proposed main restricted universe multiverse # deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-proposed main restricted universe multiverse 1.2 /ubuntu/改为/ubuntu-ports/ 网上的源多未标明cpu架构，大多是默认x86架构。\n但实际上不同cpu架构对应的源可能不同\n如arm64架构的源应该将ubuntu改为ubuntu-ports\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ focal main restricted universe multiverse 1.3 https改为http http普遍响应比较快，HTTP 使用 TCP 三次握手建立连接，客户端和服务器需要交换 3 个包，而 HTTPS除了 TCP 的三个包，还要加上 ssl 握手需要的 9 个包，所以一共是 12 个包。\n例如\ndeb http://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ focal main restricted universe multiverse 1.4 清除缓存 特别是当卡在\u0026quot;waiting for the headers\u0026quot;时\n详情可见：https://askubuntu.com/questions/156650/apt-get-update-very-slow-stuck-at-waiting-for-headers\n","permalink":"https://lysandert.github.io/posts/blog/ubuntu_bug/","summary":"1. apt/apt-get update失败 1.1 尝试换源 命令行里输入 nano /etc/apt/sources.list 在打开的编辑器里将原有的源注释。 打开firefox搜索中科大/阿里/清华源（记得一定要与ubuntu的版本对应），复制并粘贴到编辑器中。 例如：清华源for ubuntu 20.04 LTS # 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释 deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse #","title":"linux(ubuntu)常见bug解决"},{"content":"","permalink":"https://lysandert.github.io/posts/research/research1/","summary":"","title":"Research1"},{"content":"","permalink":"https://lysandert.github.io/posts/life/life/","summary":"","title":"Life"},{"content":"","permalink":"https://lysandert.github.io/posts/read/read/","summary":"","title":"Read"},{"content":"\u0026lt;div\u0026gt; test test test \u0026lt;/div\u0026gt; std::string = \u0026#34;test\u0026#34;; unique_ptr(new string(\u0026#34;t\u0026#34;)); ","permalink":"https://lysandert.github.io/posts/research/research/","summary":"\u0026lt;div\u0026gt; test test test \u0026lt;/div\u0026gt; std::string = \u0026#34;test\u0026#34;; unique_ptr(new string(\u0026#34;t\u0026#34;));","title":"Research"},{"content":" Lysander\u0026#39;s Blog 一个记录技术、阅读、生活的博客 👉友链格式 名称： Lysander\u0026rsquo;s Blog 网址： https://lysandert.github.io 图标： https://lysandert.github.io/img/cai.gif 描述： 一个记录技术、阅读、生活的博客 👉友链申请要求 秉承互换友链原则、文章定期更新、不能有太多广告、个人描述字数控制在15字内\n👉Hugo博客交流群 ????????\n","permalink":"https://lysandert.github.io/links/","summary":"Lysander\u0026#39;s Blog 一个记录技术、阅读、生活的博客 👉友链格式 名称： Lysander\u0026rsquo;s Blog 网址： https://lysandert.github.io 图标： https://lysandert.github.io/img/cai.gif 描述： 一个记录技术、阅读、生活的博客 👉友链申请要求 秉承互换友链原则、文章定期更新、不能有太多广告、个人描述字数控制在15字内 👉Hugo博客交流群 ????????","title":"🤝友链"},{"content":" 🐼 About me 😎 Name: Lysander Cheng 🎓 Educational experience Sophomore(2021.9-2025.8): Computer Science and Engineering, Chinese University of Hong Kong, Shenzhen. Github: https://github.com/LysanderT 🌱 Research interest: SLAM, AIGC \u0026amp; Emergence 🦾 I\u0026rsquo;m learning SLAM, computer network \u0026amp; OS 👍 I’m looking for a summer internship(research or work) ","permalink":"https://lysandert.github.io/about/","summary":"🐼 About me 😎 Name: Lysander Cheng 🎓 Educational experience Sophomore(2021.9-2025.8): Computer Science and Engineering, Chinese University of Hong Kong, Shenzhen. Github: https://github.com/LysanderT 🌱 Research interest: SLAM, AIGC \u0026amp; Emergence 🦾 I\u0026rsquo;m learning SLAM, computer network \u0026amp; OS 👍 I’m looking for a summer internship(research or work)","title":""},{"content":"","permalink":"https://lysandert.github.io/posts/blog/environment/","summary":"","title":""}]