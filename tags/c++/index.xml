<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>C&#43;&#43; on Lysander&#39;s Blog</title>
    <link>https://lysandert.github.io/tags/c&#43;&#43;/</link>
    <description>Recent content in C&#43;&#43; on Lysander&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 17 Apr 2023 20:23:17 +0800</lastBuildDate><atom:link href="https://lysandert.github.io/tags/c++/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>why is better to use &#43;&#43;i instead of i&#43;&#43; in a for loop</title>
      <link>https://lysandert.github.io/posts/blog/why_use_&#43;&#43;i/</link>
      <pubDate>Mon, 17 Apr 2023 20:23:17 +0800</pubDate>
      
      <guid>https://lysandert.github.io/posts/blog/why_use_&#43;&#43;i/</guid>
      <description>because ++i use less memory. // prefix T&amp;amp; T::operator++(){ *this += 1; // or sth else return *this; } // postfix T&amp;amp; T::operator++(int){ // need to create a new variable T tmp(*this); // T tmp = *this ++(*this); return tmp; } 但是，编译器会对这种情况进行优化，所以实际上，这两种写法多数情况下在速度上是没有区别的。</description>
    </item>
    
    <item>
      <title>C&#43;&#43; STL heap用法</title>
      <link>https://lysandert.github.io/posts/blog/c&#43;&#43;_heap%E7%94%A8%E6%B3%95/</link>
      <pubDate>Thu, 23 Feb 2023 13:44:00 +0800</pubDate>
      
      <guid>https://lysandert.github.io/posts/blog/c&#43;&#43;_heap%E7%94%A8%E6%B3%95/</guid>
      <description>C++的堆操作一共两套体系： make_heap和priority_queue 前者是直接把原容器变成堆，类似于python中的heapq模块， 后者是新建一个priority_queue类容器。 默认都是大顶堆,默认的cmp都是less&amp;lt;&amp;gt;. 想要小顶堆可以把val都加负号，</description>
    </item>
    
    <item>
      <title>Why use a&#43;=b instead of a = a &#43; b in C&#43;&#43;?</title>
      <link>https://lysandert.github.io/posts/blog/why_use_a&#43;b/</link>
      <pubDate>Mon, 23 Jan 2023 20:16:45 +0800</pubDate>
      
      <guid>https://lysandert.github.io/posts/blog/why_use_a&#43;b/</guid>
      <description>a, b are of same type: a += b only needs 1 assignment, it&amp;rsquo;s like [pass by reference] but for a = a + b, the process is as follows: temp = a a = temp + b it&amp;rsquo;s take 2 assignment. when a, b are strings, the problem is especially obvious. a, b are of different types a += b can do implicit typecasting but a = a + b cannot</description>
    </item>
    
  </channel>
</rss>
